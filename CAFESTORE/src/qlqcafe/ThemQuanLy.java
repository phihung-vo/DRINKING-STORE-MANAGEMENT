/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qlqcafe;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Nhom 40
 */
public class ThemQuanLy extends javax.swing.JFrame {    
    private final NguoiDung staff;
    
    public ThemQuanLy(NguoiDung user) {
        initComponents();
        this.staff = user;
        jLabel_DIENTENNV.setText(staff.getHoten());
        setResizable(false);
        setLocationRelativeTo(this);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_ma = new javax.swing.JTextField();
        jPasswordField_mkql = new javax.swing.JPasswordField();
        jPasswordField_mknv = new javax.swing.JPasswordField();
        jButton_luu = new javax.swing.JButton();
        jButton_home = new javax.swing.JButton();
        jButton_reset = new javax.swing.JButton();
        jLabel_DIENTENNV = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Thay đổi tài khoản quản lý");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 333, 54));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Mã Nhân Viên");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 100, 41));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Mật khẩu nhân viên lên quản lý");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 230, 41));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Mật khẩu quản lý đang hoạt động");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 220, 250, 41));
        getContentPane().add(jTextField_ma, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 195, 41));
        getContentPane().add(jPasswordField_mkql, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, 195, 41));
        getContentPane().add(jPasswordField_mknv, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 195, 41));

        jButton_luu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photo/floppy-disk (1).png"))); // NOI18N
        jButton_luu.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton_luu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_luuActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_luu, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, 77, 62));

        jButton_home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photo/smart-home.png"))); // NOI18N
        jButton_home.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_homeActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_home, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, 77, 62));

        jButton_reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photo/edit.png"))); // NOI18N
        jButton_reset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_resetActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 50, 40));

        jLabel_DIENTENNV.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel_DIENTENNV.setText("DIỀN TÊN NV");
        getContentPane().add(jLabel_DIENTENNV, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 200, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Save");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, 40, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Reset");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 40, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Home");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, 40, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photo/nv.png"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void lamMoi(){
        jTextField_ma.setText("");
        jPasswordField_mknv.setText("");
        jPasswordField_mkql.setText("");
    }
    
    private boolean kiemTraRong(){
        if(jTextField_ma.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập mã nhân viên");
            return false;
        }
        else if(jPasswordField_mknv.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập mật khẩu của nhân viên lên quản lý");
            return false;
        }
        else if(jPasswordField_mkql.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập mật khẩu quản lý đang hoạt động");
            return false;
        }
        return true;
    }
    
    private int kiemTraAccAdmin(){
        Connection cn = ConnectDB.SQLConnect();
        int tonTai = 0;
        String sql = "SELECT * FROM NHANVIEN WHERE TAIKHOAN = 'admin'";
        try {
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                tonTai = 1;
            }
            rs.close();
            ps.close();
            cn.close();
        } catch (SQLException e) {
             Logger.getLogger(DoUong.class.getName()).log(Level.SEVERE, null, e);
        }
        return tonTai;
    }
    
    private int kiemTraTonTai(String maNV){
        Connection cn = ConnectDB.SQLConnect();
        int tonTai = 0;
        String sql = "select MANV from NHANVIEN where MANV = '" + maNV +"' AND MACV = '1'";
        try {
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                tonTai = 1;
            }
            rs.close();
            ps.close();
            cn.close();
        } catch (SQLException e) {
             Logger.getLogger(DoUong.class.getName()).log(Level.SEVERE, null, e);
        }
        return tonTai;
    }
    
    private void updateQL(int maCV,String maNV){                
        String sql = "UPDATE NHANVIEN SET MACV = '"+maCV+"' WHERE MANV = '"+maNV+"'";
        Connection cn = ConnectDB.SQLConnect();
        ConnectDB.queryUpdate(sql);
    }
    
    private boolean kiemtraMKNV(String maNV, String mk){       
        String sql = "SELECT * FROM NHANVIEN WHERE MANV = '"+ jTextField_ma.getText() +"' AND MATKHAU = HASHBYTES('MD5','"+ jPasswordField_mknv.getText() +"')";
        try {
            Connection cn = ConnectDB.SQLConnect();
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if(!rs.next()){
                JOptionPane.showMessageDialog(this, "Mật khẩu nhân viên không đúng!");
                return false;
            }
            rs.close();
            ps.close();
            cn.close();
        } catch (HeadlessException | SQLException e) {
            Logger.getLogger(DoUong.class.getName()).log(Level.SEVERE, null, e);
        }
        return true;
    }
    
    private boolean kiemtraMKQL(String maNV, String mkql){       
        String sql = "SELECT * FROM NHANVIEN WHERE MANV = '"+ staff.getManv() +"' AND MATKHAU = HASHBYTES('MD5','"+ jPasswordField_mkql.getText() +"')";
        try {
            Connection cn = ConnectDB.SQLConnect();
            PreparedStatement ps = cn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if(!rs.next()){
                JOptionPane.showMessageDialog(this, "Mật khẩu quản lý không đúng!");
                return false;
            }
            rs.close();
            ps.close();
            cn.close();
        } catch (HeadlessException | SQLException e) {
            Logger.getLogger(DoUong.class.getName()).log(Level.SEVERE, null, e);
        }
        return true;
    }
    
    private void jButton_luuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_luuActionPerformed
        String maNV = jTextField_ma.getText();
        String mknv = jPasswordField_mkql.getText();
        String mkql = jPasswordField_mknv.getText();
        if(kiemTraRong() == true && kiemTraTonTai(maNV) != 1 && kiemtraMKNV(maNV, mknv)== true && kiemtraMKQL(maNV, mkql) == true){
            int click = JOptionPane.showConfirmDialog(this , "Thêm quản lý ? " ,"Thông báo",2);
            if(click == JOptionPane.YES_OPTION){
                updateQL(1,maNV);
                JOptionPane.showMessageDialog(this, "Thêm quản lý thành công");
                lamMoi();
            } else if( click == JOptionPane.CANCEL_OPTION){
                return;
            }
        } else if(kiemTraTonTai(maNV) == 1){
            JOptionPane.showMessageDialog(this, "Nhân viên này đã là quản lý, không thể thêm"); 
        } else{
            JOptionPane.showMessageDialog(this, "Thêm quản lý thất bại");                
        }  
    }//GEN-LAST:event_jButton_luuActionPerformed

    private void jButton_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_homeActionPerformed
        GiaoDienChung gdc = new GiaoDienChung(this.staff);
        this.setVisible(false);
        gdc.setVisible(true);
    }//GEN-LAST:event_jButton_homeActionPerformed
    
    private void jButton_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_resetActionPerformed
        // TODO add your handling code here:
        String maNV = jTextField_ma.getText();
        String mknv = jPasswordField_mkql.getText();
        String mkql = jPasswordField_mknv.getText();
        if(kiemTraRong() == true && kiemTraTonTai(maNV) == 1 && kiemtraMKNV(maNV, mknv)== true && kiemtraMKQL(maNV, mkql) == true){
            int click = JOptionPane.showConfirmDialog(this , "Reset chức vụ quản lý về nhân viên ? " ,"Thông báo",2);
            if(click == JOptionPane.YES_OPTION){
                updateQL(2,maNV);
                JOptionPane.showMessageDialog(this, "Reset quản lý về nhân viên thành công");
                lamMoi();
            } else if( click == JOptionPane.CANCEL_OPTION){
                return;
            }
        } else if(kiemTraTonTai(maNV) != 1){
            JOptionPane.showMessageDialog(this, "Nhân viên này không phải quản lý, không thể reset trở về"); 
        } else{
            JOptionPane.showMessageDialog(this, "Reset quản lý thất bại");                
        }           
    }//GEN-LAST:event_jButton_resetActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_home;
    private javax.swing.JButton jButton_luu;
    private javax.swing.JButton jButton_reset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_DIENTENNV;
    private javax.swing.JPasswordField jPasswordField_mknv;
    private javax.swing.JPasswordField jPasswordField_mkql;
    private javax.swing.JTextField jTextField_ma;
    // End of variables declaration//GEN-END:variables
}
